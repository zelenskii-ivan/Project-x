// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model CompanyInfo {
  id              String   @id @default(cuid())
  name            String   // Название ИП
  inn             String   // ИНН
  ogrnip          String   // ОГРНИП
  address         String   // Юридический адрес
  phone           String   // Контактный телефон
  email           String   // Контактный email
  description     String   // Описание деятельности
  workingHours    String   // Часы работы
  instagram       String?  // Ссылка на Instagram
  vk             String?  // Ссылка на VK
  telegram       String?  // Ссылка на Telegram
  whatsapp       String?  // Ссылка на WhatsApp
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("user")
  phone         String?
  address       String?
  birthDate     DateTime?
  bonusPoints   Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    String      @default("pending")
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order  @relation(fields: [orderId], references: [id])
}
